from datetime import timedelta

import transaction
from sqlalchemy.orm import scoped_session
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.exc import IntegrityError
from sqlalchemy import Integer, Unicode, Column, Float, Interval, Boolean
from zope.sqlalchemy import ZopeTransactionExtension

DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
Base = declarative_base()

class MyModel(Base):
    __tablename__ = 'models'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(255), unique=True)
    value = Column(Integer)
    float_value = Column(Float)
    boolean = Column(Boolean)
    interval = Column(Interval)

    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)


def populate():
    session = DBSession()
    model = MyModel(name=u'test name', value=55, float_value=3.5, interval=timedelta(4), boolean=True)
    session.add(model)
    session.flush()
    transaction.commit()


def initialize_sql(engine):
    DBSession.configure(bind=engine)
    Base.metadata.bind = engine
    Base.metadata.create_all(engine)
    try:
        populate()
    except IntegrityError:
        transaction.abort()
    return DBSession


def appmaker(engine):
    initialize_sql(engine)
