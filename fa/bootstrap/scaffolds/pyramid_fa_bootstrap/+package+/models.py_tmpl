from datetime import timedelta
from sqlalchemy.sql.schema import ForeignKey

import transaction
from fa.bootstrap import renderers
from formalchemy import Column as FAColumn
from sqlalchemy.orm import scoped_session, relationship
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.exc import IntegrityError
from sqlalchemy import Integer, Unicode, Column, Float, Interval, Boolean, Table
from zope.sqlalchemy import ZopeTransactionExtension
from pyramid_formalchemy import events

DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
Base = declarative_base()


class ModelGroup(Base):
    __tablename__ = 'gropus'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(255), unique=True)

    def __unicode__(self):
        return self.name

    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)


class ModelItem(Base):
    __tablename__ = 'items'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(255), unique=True)

    def __unicode__(self):
        return self.name

    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)

model_items_1_table = Table('model_items_1', Base.metadata,
                            Column('item_id', Integer, ForeignKey(ModelItem.id), primary_key=True),
                            Column('model_id', Integer, ForeignKey('models.id'), primary_key=True))
model_items_2_table = Table('model_items_2', Base.metadata,
                            Column('item_id', Integer, ForeignKey(ModelItem.id), primary_key=True),
                            Column('model_id', Integer, ForeignKey('models.id'), primary_key=True))
model_items_3_table = Table('model_items_3', Base.metadata,
                            Column('item_id', Integer, ForeignKey(ModelItem.id), primary_key=True),
                            Column('model_id', Integer, ForeignKey('models.id'), primary_key=True))


class MyModel(Base):
    __tablename__ = 'models'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(255), unique=True)
    value = Column(Integer)
    float_value = Column(Float)
    boolean = Column(Boolean)
    interval = Column(Interval)
    many_to_one_1_id = Column(Integer, ForeignKey(ModelGroup.id))
    many_to_one_1 = relationship(ModelGroup, foreign_keys=many_to_one_1_id)
    many_to_one_2_id = FAColumn(Integer, ForeignKey(ModelGroup.id), html={'width': 'auto'})
    many_to_one_2 = relationship(ModelGroup, foreign_keys=many_to_one_2_id)
    many_to_one_3_id = FAColumn(Integer, ForeignKey(ModelGroup.id),
                                renderer=renderers.BootstrapSelectPickerFieldRenderer)
    many_to_one_3 = relationship(ModelGroup, foreign_keys=many_to_one_3_id)
    many_to_many_1 = relationship(ModelItem, secondary=model_items_1_table)
    many_to_many_2 = relationship(ModelItem, secondary=model_items_2_table)
    many_to_many_3 = relationship(ModelItem, secondary=model_items_3_table)

    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)


@events.subscriber([MyModel, events.IBeforeEditRenderEvent])
def before_my_model_render(context, event):
    # change renderer for many_to_many fields, unfortunely this is not possible via `Column` attributes
    # see: https://github.com/FormAlchemy/formalchemy/issues/57
    fs = event.kwargs['fs']
    fs['many_to_many_2'].set(renderer=renderers.BootstrapSelectPickerFieldRenderer)
    fs['many_to_many_3'].set(renderer=renderers.DualListBoxFieldRenderer)


def populate():
    session = DBSession()
    session.add(ModelGroup(name='Group1'))
    session.add(ModelGroup(name='Group2'))
    for i in range(500):
        session.add(ModelItem(name='Item ' + str(i)))
    session.add(MyModel(name=u'test name', value=55, float_value=3.5, interval=timedelta(4), boolean=True))
    session.flush()
    transaction.commit()


def initialize_sql(engine):
    DBSession.configure(bind=engine)
    Base.metadata.bind = engine
    Base.metadata.create_all(engine)
    try:
        populate()
    except IntegrityError:
        transaction.abort()
    return DBSession


def appmaker(engine):
    initialize_sql(engine)
